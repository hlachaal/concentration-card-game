{"version":3,"sources":["card.js","utils.js","deck.js","App.js","index.js"],"names":["Card","className","this","props","show","alt","src","Component","request","method","endpoint","a","async","fetch","response","status","Error","json","loadCards","deck_id","Deck","newGame","then","setState","state","selected","code","value","remaining","selectionMode","bind","catch","reason","console","log","loadBoard","cards","selectCard","filter","s","length","push","setTimeout","filtered","card","onClick","map","key","suit","image","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fd3628f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Card extends Component {\r\n  render() {\r\n    return (\r\n      <div className={'card'}>\r\n        <img\r\n          className={!this.props.show ? 'hide' : null}\r\n          alt={this.props.alt}\r\n          src={this.props.src}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const API_URL = 'https://deckofcardsapi.com/api/';\r\n\r\n/**\r\n * Network request function\r\n * parse response status, and return the actual data\r\n * @param {string} method HTTP method name\r\n * @param {string} endpoint API Resource\r\n * @return {any} Value returned from API.\r\n */\r\nasync function request(method, endpoint) {\r\n  const response = await fetch(`${API_URL}/${endpoint}`);\r\n  if (response.status !== 200) {\r\n    throw new Error(\r\n      `Request Error :: api :: request :: ${method} ${endpoint} :: ${response.status}`\r\n    );\r\n  }\r\n  return await response.json();\r\n}\r\n\r\n/**\r\n * shuffle a new deck\r\n * @return {any} deck object with the shuffle status a the new deck ID.\r\n */\r\nexport async function newDeck() {\r\n  return await request('GET', 'deck/new/shuffle/');\r\n}\r\n\r\n/**\r\n * Draw 52 cards from a specific deck\r\n * @param {string} deck_id deck ID\r\n * @return {any} object of 52 cards.\r\n */\r\nexport async function loadCards(deck_id) {\r\n  return await request('GET', `deck/${deck_id}/draw/?count=52`);\r\n}\r\n","import React, { Component } from 'react';\r\nimport Card from './card';\r\nimport { newDeck, loadCards } from './utils';\r\n\r\nexport default class Deck extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      deck_id: '',\r\n      cards: [],\r\n      selected: [\r\n        { code: '', value: '' },\r\n        { code: '', value: '' }\r\n      ],\r\n      selectionMode: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='board'>\r\n        <button onClick={this.newGame}>New Game</button>\r\n        <div className='deck'>\r\n          {this.state.cards.length > 0\r\n            ? this.state.cards.map(card => {\r\n                return (\r\n                  <div\r\n                    className='anchor'\r\n                    key={`${card.code}`}\r\n                    onClick={() => this.selectCard(card.code, card.value)}\r\n                  >\r\n                    <Card\r\n                      show={\r\n                        this.state.selected.filter(s => s.code === card.code)\r\n                          .length > 0\r\n                          ? true\r\n                          : false\r\n                      }\r\n                      alt={`${card.value} ${card.suit}`}\r\n                      src={card.image}\r\n                    />\r\n                  </div>\r\n                );\r\n              })\r\n            : null}\r\n          {this.state.cards.length === 0 && this.state.selectionMode ? (\r\n            <div className='done'>Game ended</div>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // creating a new deck / game\r\n  newGame = async () => {\r\n    await newDeck()\r\n      .then(\r\n        function onFulfilledJSON(json) {\r\n          this.setState({\r\n            ...this.state,\r\n            selected: [\r\n              { code: '', value: '' },\r\n              { code: '', value: '' }\r\n            ],\r\n            deck_id: json.deck_id,\r\n            remaining: json.remaining,\r\n            selectionMode: false\r\n          });\r\n        }.bind(this)\r\n      )\r\n      .catch(function onRejected(reason) {\r\n        console.log(reason);\r\n      });\r\n\r\n    this.loadBoard();\r\n  };\r\n\r\n  // Loading the 52 cards\r\n  loadBoard = async () => {\r\n    await loadCards(this.state.deck_id)\r\n      .then(\r\n        function onFulfilledJSON(json) {\r\n          this.setState({\r\n            ...this.state,\r\n            cards: json.cards,\r\n            selectionMode: true\r\n          });\r\n        }.bind(this)\r\n      )\r\n      .catch(function onRejected(reason) {\r\n        console.log(reason);\r\n      });\r\n  };\r\n\r\n  // When clicking on a card\r\n  selectCard = (code, value) => {\r\n    switch (this.state.selected.filter(s => s.code !== '').length) {\r\n      case 0:\r\n        this.setState({\r\n          ...this.state,\r\n          selected: [{ code: code, value: value }]\r\n        });\r\n        break;\r\n      case 1:\r\n        const selected = this.state.selected;\r\n        selected.push({ code: code, value: value });\r\n        this.setState({ ...this.state, selected });\r\n        setTimeout(() => {\r\n          if (this.state.selected[0].value === value) {\r\n            const filtered = this.state.cards.filter(card => {\r\n              return (\r\n                card.code !== this.state.selected[1].code &&\r\n                card.code !== this.state.selected[0].code\r\n              );\r\n            });\r\n            this.setState({\r\n              ...this.state,\r\n              cards: filtered,\r\n              selected: [\r\n                { code: '', value: '' },\r\n                { code: '', value: '' }\r\n              ]\r\n            });\r\n          } else {\r\n            this.setState({\r\n              ...this.state,\r\n              selected: [\r\n                { code: '', value: '' },\r\n                { code: '', value: '' }\r\n              ]\r\n            });\r\n          }\r\n        }, 1000);\r\n        break;\r\n      default:\r\n        this.setState({\r\n          ...this.state,\r\n          selected: [\r\n            { code: '', value: '' },\r\n            { code: '', value: '' }\r\n          ]\r\n        });\r\n        break;\r\n    }\r\n  };\r\n}\r\n","import React from 'react';\nimport Deck from './deck';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Deck />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}